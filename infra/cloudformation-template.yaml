AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Expense Reimbursement System with Cognito, Lambda, and API Gateway

Resources:

  ExpenseReceiptBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "expense-receipts-${AWS::AccountId}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  SubmitExpenseFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SubmitExpenseFunction
      Handler: index.lambda_handler
      Runtime: python3.10
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Expense submitted successfully!'
              }
      Timeout: 5

  ApproveExpenseFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ApproveExpenseFunction
      Handler: index.lambda_handler
      Runtime: python3.10
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              body = json.loads(event.get('body', '{}'))
              expense_id = body.get('expense_id')
              approved = body.get('approved')
              manager_id = body.get('manager_id')
              if not expense_id or approved is None:
                  return {'statusCode': 400, 'body': json.dumps({'message': 'Invalid input'})}
              status = 'approved' if approved else 'rejected'
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': f'Expense {expense_id} has been {status}.',
                      'manager_id': manager_id
                  })
              }
      Timeout: 5

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ExpenseSystemUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ExpenseAppClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  EmployeeGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Employee
      UserPoolId: !Ref UserPool

  ManagerGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Manager
      UserPoolId: !Ref UserPool

  FinanceGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Finance
      UserPoolId: !Ref UserPool

  ExpenseApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ExpenseReimbursementAPI

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      RestApiId: !Ref ExpenseApi
      IdentitySource: method.request.header.Authorization
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt UserPool.Arn

  SubmitResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ExpenseApi
      ParentId: !GetAtt ExpenseApi.RootResourceId
      PathPart: submit

  SubmitMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExpenseApi
      ResourceId: !Ref SubmitResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmitExpenseFunction.Arn}/invocations

  SubmitExpensePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SubmitExpenseFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExpenseApi}/*/POST/submit
